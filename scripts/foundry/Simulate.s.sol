// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Script.sol";
import { console } from "forge-std/console.sol";

contract Simulate is Script {
    error WrongCall();

    function run() external {
        // TODO replace with your inputs
        address sender = address(0xa9bbbDDe822789F123667044443dc7001fb43C01);
        address contractAddress = address(0x102aa79ee06c3C65A23AbBe338714b91F9d12A04);
        // remove the 0x
        bytes
            memory data = hex"87cb0f510000000000000000000000000000206329b97db379d5e1bf586bbdb969c63274000000000000000000000000c69ad9bab1dee23f4605a82b3354f8e40d1e59660000000000000000000000005441731eed05a8208e795086a5df41416dd34104000000000000000000000000870ac11d48b15db9a138cf899d20f13f79ba00bc0000000000000000000000000000000000000000000000000bef55718ad6000000000000000000000000000036dfe6eddef7d32497e15cdf826d6cf4ee9293af00000000000000000000000000000000000000000000000046ff7eeae0ab8705000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000007a0000000000000000000000000c69ad9bab1dee23f4605a82b3354f8e40d1e59660000000000000000000000000000206329b97db379d5e1bf586bbdb969c6327400000000000000000000000000000000000000000000000046ff7eeae0ab870500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000700000000000000000000000000a9bbbdde822789f123667044443dc7001fb43c010000000000000000000000000000000000000000000002f75ef52f7f8eb9a6e90000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a9bbbdde822789f123667044443dc7001fb43c01000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000046a49e486c58bff100000000000000000000000000000000000000000000000046a49e486c58bff100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000cd5fe23c85820f7b72d0926fc9b05b43e359b7ee0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000cd5fe23c85820f7b72d0926fc9b05b43e359b7ee000000000000000000000000000000000000000000000377be5b74e4eee93c500000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000034807ed2379000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000cd5fe23c85820f7b72d0926fc9b05b43e359b7ee0000000000000000000000000000206329b97db379d5e1bf586bbdb969c63274000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000102aa79ee06c3c65a23abbe338714b91f9d12a0400000000000000000000000000000000000000000000000042d0e91f53c1b42c000000000000000000000000000000000000000000000375b962310ac44850000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001fe0000000000000000000000000000000000000000000000000001e00001b200a007e5c0d200000000000000000000000000000000000000000000018e00009e00004f02a000000000000000000000000000000000000000000000000041fa7c4942839374ee63c1e5007a415b19932c0105c82fdb6b720bb01b0cc2cae3cd5fe23c85820f7b72d0926fc9b05b43e359b7ee02a000000000000000000000000000000000000000000000000000000003cddd2f8eee63c1e50088e6a0c2ddd26feeb64f039a2c41296fcb3f5640c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25120222222fd79264bbe280b4986f6fefbc3524d0137a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800043b6a1fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000206329b97db379d5e1bf586bbdb969c63274000000000000000000000000111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000000000000000000000000020d6bdbf780000206329b97db379d5e1bf586bbdb969c63274111111125421ca6dc452d289314280a0f8842a650000f737be4600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000cd5fe23c85820f7b72d0926fc9b05b43e359b7ee000000000000000000000000ac0047886a985071476a1186be89222659970d65000000000000000000000000f32e58f92e60f4b0a37a69b95d642a471365eae8000000000000000000000000c69ad9bab1dee23f4605a82b3354f8e40d1e596600000000000000000000000000000000000000000000000042d0e91f53c1b42c";

        vm.prank(sender, sender);
        (bool success, ) = contractAddress.call{ value: 0.0 ether }(data);
        if (!success) revert WrongCall();
    }
}
