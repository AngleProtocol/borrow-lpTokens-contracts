// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.17;

import "forge-std/Script.sol";
import { console } from "forge-std/console.sol";
import { ERC4626LevSwapperMorphoGauntletUSDCPrime } from "borrow-staked/swapper/LevSwapper/morpho/implementations/ERC4626LevSwapperMorphoGauntletUSDCPrime.sol";
import "../MainnetConstants.s.sol";
import { MarketParams } from "morpho-blue/libraries/MarketParamsLib.sol";

contract MorphoLiquidate is Script, MainnetConstants {
    error EmptyReturnMessage();

    function run() external {
        uint256 deployerPrivateKey = vm.envUint("KEEPER_PRIVATE_KEY");
        address deployer = vm.addr(deployerPrivateKey);
        vm.startBroadcast(deployerPrivateKey);

        // MarketParams memory params;
        // params.collateralToken = GTUSDCPRIME;
        // params.lltv = LLTV_86;
        // params.irm = IRM_MODEL;
        // params.oracle = 0x4D7d8eF974428a7D73C90B0249003D30cf97239E;
        // params.loanToken = USDA;
        // address borrower = 0xA9DdD91249DFdd450E81E1c56Ab60E1A62651701;
        // uint256 seizedAssets = 50000000000000000000;
        bytes
            memory data = hex"87cb0f510000000000000000000000000000206329b97db379d5e1bf586bbdb969c63274000000000000000000000000dd0f28e19c1780eb6396170735d45153d261490d0000000000000000000000003b8c4a340336941524de276ff730b3be71157b55000000000000000000000000870ac11d48b15db9a138cf899d20f13f79ba00bc0000000000000000000000000000000000000000000000000bef55718ad60000000000000000000000000000a9ddd91249dfdd450e81e1c56ab60e1a626517010000000000000000000000000000000000000000000000001e87f85809dc000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000dd0f28e19c1780eb6396170735d45153d261490d0000000000000000000000000000206329b97db379d5e1bf586bbdb969c632740000000000000000000000000000000000000000000000001e87f85809dc000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000280000000000000000000000000a9bbbdde822789f123667044443dc7001fb43c010000000000000000000000000000000000000000000000000c7311519f1b943f0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a9bbbdde822789f123667044443dc7001fb43c01000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000001e60e3e6f55480000000000000000000000000000000000000000000000000001e60e3e6f554800000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000dd0f28e19c1780eb6396170735d45153d261490d0000000000000000000000000000000000000000000000000000000000000000";

        address swapper = 0x1b610F5bA95d3a9d0f7B41ED55615157074639Bf;
        (bool success, bytes memory result) = swapper.call(data);
        if (!success) _revertBytes(result);
        vm.stopBroadcast();
    }

    function _revertBytes(bytes memory errMsg) internal {
        if (errMsg.length != 0) {
            //solhint-disable-next-line
            assembly {
                revert(add(32, errMsg), mload(errMsg))
            }
        }
        revert EmptyReturnMessage();
    }
}
