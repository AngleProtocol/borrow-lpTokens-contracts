// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "../BaseTest.test.sol";
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

contract OneInchTest is BaseTest {
    using stdStorage for StdStorage;
    using SafeERC20 for IERC20;

    error OnRevert();

    function setUp() public override {
        _ethereum = vm.createFork(vm.envString("ETH_NODE_URI_MAINNET"), 16548159);
        vm.selectFork(_ethereum);

        super.setUp();
    }

    // ================================== DEPOSIT ==================================

    function testFromUSDT() public {
        address payable sender = payable(0x7F5f110177b1704Da2bF91341ddcc61BF535798B);
        IERC20 asset = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);
        address _contract = 0x1111111254EEB25477B68fb85Ed929f73A960582;
        bytes
            memory data = hex"12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000006c3f90f043a72fa612cbac8115ee7e52bde6e4900000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e00000000000000000000000007f5f110177b1704da2bf91341ddcc61bf535798b00000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000004f2f01f19918f2332c1107000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc0000000000000000000000000000000000000000000000000000de0000b05120bebc44782c7db0a1a60cb6fe97d0b483032ff1c7dac17f958d2ee523a2206206994597c13d831ec700444515cef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f2f01f19918f2332c110780a06c4eca276c3f90f043a72fa612cbac8115ee7e52bde6e4901111111254eeb25477b68fb85ed929f73a96058200000000cfee7c08";
        vm.startPrank(sender);
        asset.safeApprove(_contract, type(uint256).max);
        (bool success, bytes memory result) = _contract.call(data);
        if (!success) revert OnRevert();
        vm.stopPrank();
    }

    function testFromUSDC() public {
        address payable sender = payable(0x47ac0Fb4F2D84898e4D9E7b4DaB3C24507a6D503);
        IERC20 asset = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
        address _contract = 0x1111111254EEB25477B68fb85Ed929f73A960582;
        bytes
            memory data = hex"12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006c3f90f043a72fa612cbac8115ee7e52bde6e4900000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e000000000000000000000000047ac0fb4f2d84898e4d9e7b4dab3c24507a6d50300000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000004f2c927e24a1c9074ed537000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001700000000000000000000000000000000000000000000001520001240000da00a007e5c0d20000000000000000000000000000000000000000000000000000b600000600a0fd53121f5120bebc44782c7db0a1a60cb6fe97d0b483032ff1c76b175474e89094c44da98b954eedeac495271d0f00044515cef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f2c927e24a1c9074ed53700a0f2fa6b666c3f90f043a72fa612cbac8115ee7e52bde6e49000000000000000000000000000000000000000000050ca37710b41d25b0c85fa0000000000000000443dd34cd82f6c5c80a06c4eca276c3f90f043a72fa612cbac8115ee7e52bde6e4901111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000cfee7c08";
        vm.startPrank(sender);
        asset.safeApprove(_contract, type(uint256).max);
        (bool success, bytes memory result) = _contract.call(data);
        if (!success) revert OnRevert();
        vm.stopPrank();
    }

    function testFromDAI() public {
        address payable sender = payable(0x075e72a5eDf65F0A5f44699c7654C1a76941Ddc8);
        IERC20 asset = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
        address _contract = 0x1111111254EEB25477B68fb85Ed929f73A960582;
        bytes
            memory data = hex"12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000006c3f90f043a72fa612cbac8115ee7e52bde6e4900000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000075e72a5edf65f0a5f44699c7654c1a76941ddc800000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000004f2cc0dea0346298b49c51000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001700000000000000000000000000000000000000000000001520001240000da00a007e5c0d20000000000000000000000000000000000000000000000000000b600000600a03dd5cfd15120bebc44782c7db0a1a60cb6fe97d0b483032ff1c7a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800244515cef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f2cc0dea0346298b49c5100a0f2fa6b666c3f90f043a72fa612cbac8115ee7e52bde6e49000000000000000000000000000000000000000000050ca66c3d27e98da840d390000000000000000445130119de3617780a06c4eca276c3f90f043a72fa612cbac8115ee7e52bde6e4901111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000cfee7c08";
        vm.startPrank(sender);
        asset.safeApprove(_contract, type(uint256).max);
        (bool success, bytes memory result) = _contract.call(data);
        if (!success) revert OnRevert();
        vm.stopPrank();
    }

    function testToDAI() public {
        address payable sender = payable(0xe74b28c2eAe8679e3cCc3a94d5d0dE83CCB84705);
        IERC20 asset = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);
        address _contract = 0x1111111254EEB25477B68fb85Ed929f73A960582;
        bytes
            memory data = hex"12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e00000000000000000000000006c3f90f043a72fa612cbac8115ee7e52bde6e4900000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000e74b28c2eae8679e3ccc3a94d5d0de83ccb8470500000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000052f9584d2c3f095851c386000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dc0000000000000000000000000000000000000000000000000000be0000905120bebc44782c7db0a1a60cb6fe97d0b483032ff1c76c3f90f043a72fa612cbac8115ee7e52bde6e49000041a4d01d20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000052f9584d2c3f095851c38680a06c4eca276b175474e89094c44da98b954eedeac495271d0f1111111254eeb25477b68fb85ed929f73a96058200000000cfee7c08";
        vm.startPrank(sender);
        asset.safeApprove(_contract, type(uint256).max);
        (bool success, bytes memory result) = _contract.call(data);
        if (!success) revert OnRevert();
        vm.stopPrank();
    }

    function testToUSDT() public {
        address payable sender = payable(0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B);
        IERC20 asset = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);
        address _contract = 0x1111111254EEB25477B68fb85Ed929f73A960582;
        bytes
            memory data = hex"12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e00000000000000000000000006c3f90f043a72fa612cbac8115ee7e52bde6e490000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000d632f22692fac7611d2aa1c0d552930d43caed3b00000000000000000000000000000000000000000082b1cd29a27aa95e0000000000000000000000000000000000000000000000000000000000866a65c56db2000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dc0000000000000000000000000000000000000000000000000000be0000905120bebc44782c7db0a1a60cb6fe97d0b483032ff1c76c3f90f043a72fa612cbac8115ee7e52bde6e49000041a4d01d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000866a65c56db280a06c4eca27dac17f958d2ee523a2206206994597c13d831ec71111111254eeb25477b68fb85ed929f73a96058200000000cfee7c08";
        vm.startPrank(sender);
        asset.safeApprove(_contract, type(uint256).max);
        (bool success, bytes memory result) = _contract.call(data);
        if (!success) revert OnRevert();
        vm.stopPrank();
    }
}
